# -*- coding: utf-8 -*-
"""TA_Modeling_ResNet50V2_Rasio 80:20

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z7fV23BA__1hhU5E0X-8xW2Fy-BCXaPk

# Impor pustaka yang diperlukan
"""

import numpy as np
import pandas as pd
import os

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50V2

from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, Dropout
from tensorflow.keras.callbacks import ReduceLROnPlateau
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

from tensorflow.keras import Input, Model

from sklearn.metrics import classification_report, confusion_matrix

import matplotlib.pyplot as plt
import seaborn as sn
import cv2

import glob

"""# Dataset"""

from google.colab import drive
drive.mount('/content/drive')

train_dir = '/content/drive/MyDrive/chest_xray_v3/train'
test_dir = '/content/drive/MyDrive/chest_xray_v2/test'
val_dir = '/content/drive/MyDrive/chest_xray_v3/val'

pneumonia_train_images = glob.glob(train_dir+"/PNEUMONIA/*.jpeg")
normal_train_images = glob.glob(train_dir+"/NORMAL/*.jpeg")

"""# Visualisasi Data"""

import random

# Mengambil gambar acak dari masing-masing kelas
pneumonia_image = random.choice(pneumonia_train_images)  # Mengambil gambar acak dari pneumonia_train_images
normal_image = random.choice(normal_train_images)  # Mengambil gambar acak dari normal_train_images

# Menampilkan gambar Pneumonia dan Normal dalam satu baris
fig, axes = plt.subplots(1, 2, figsize=(10, 5))  # 1 baris, 2 kolom
# Gambar Pneumonia
img_pneumonia = cv2.imread(pneumonia_image)
img_pneumonia = cv2.resize(img_pneumonia, (220, 220))
axes[0].imshow(cv2.cvtColor(img_pneumonia, cv2.COLOR_BGR2RGB))  # Mengkonversi warna BGR ke RGB
axes[0].set_title("Pneumonia")
axes[0].axis('off')  # Menonaktifkan axis

# Gambar Normal
img_normal = cv2.imread(normal_image)
img_normal = cv2.resize(img_normal, (220, 220))
axes[1].imshow(cv2.cvtColor(img_normal, cv2.COLOR_BGR2RGB))  # Mengkonversi warna BGR ke RGB
axes[1].set_title("Normal")
axes[1].axis('off')  # Menonaktifkan axis

plt.tight_layout()  # Mengatur jarak antar subplots
plt.show()

"""# Deteksi tepi Canny"""

fig, axes = plt.subplots(nrows=1, ncols=6, figsize=(15,10), subplot_kw={'xticks':[], 'yticks':[]})
for i, ax in enumerate(axes.flat):
    img = cv2.imread(pneumonia_train_images[i])
    img = cv2.resize(img, (512,512))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.Canny(img, 80, 100)
    ax.imshow(img)
    ax.set_title("Pneumonia")
fig.tight_layout()
plt.show()

fig, axes = plt.subplots(nrows=1, ncols=6, figsize=(15,10), subplot_kw={'xticks':[], 'yticks':[]})
for i, ax in enumerate(axes.flat):
    img = cv2.imread(normal_train_images[i])
    img = cv2.resize(img, (512,512))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.Canny(img, 80, 100)
    ax.imshow(img)
    ax.set_title("Normal")
fig.tight_layout()
plt.show()

"""# Membuat generator data gambar"""

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,          # Rotasi acak
    width_shift_range=0.2,      # Pergeseran horizontal
    height_shift_range=0.2,     # Pergeseran vertikal
    shear_range=0.15,           # Distorsi geser
    zoom_range=0.2,             # Pembesaran acak
    horizontal_flip=True        # Membalik gambar
)
val_datagen = ImageDataGenerator(rescale=1./255,)
test_datagen = ImageDataGenerator(rescale = 1./255.,)


train_generator = train_datagen.flow_from_directory(train_dir, batch_size=32, class_mode='binary', target_size = (224, 224))
validation_generator = val_datagen.flow_from_directory(val_dir, batch_size=32, class_mode = 'binary', target_size=(224, 224))
test_generator = test_datagen.flow_from_directory(test_dir,shuffle=False, batch_size=32, class_mode = 'binary', target_size=(224, 224))

input_shape = (224, 224, 3)

"""# Model Development"""

# Load base model dengan ResNet50V2 tanpa top layer, menggunakan weights imagenet
base_model = tf.keras.applications.ResNet50V2(weights='imagenet', input_shape=input_shape, include_top=False)
base_model.trainable = True

# Freeze semua layer kecuali 20 layer terakhir
for layer in base_model.layers[:-20]:
    layer.trainable = False

# Build model menggunakan Functional API
inputs = tf.keras.Input(shape=input_shape)
x = base_model(inputs, training=True)
x = GlobalAveragePooling2D()(x) # Pooling layer
x = Dense(256, activation='relu')(x)  # Menambah unit Dense
x = Dropout(0.3)(x)  # Dropout layer untuk regularisasi
outputs = Dense(1, activation='sigmoid')(x) # Output layer

model = tf.keras.Model(inputs, outputs)

# Tampilkan jumlah parameter dalam model
model.summary()

# Compile model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Callback untuk menurunkan learning rate ketika val_loss tidak meningkat
lr_scheduler = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3)

# Training model
history = model.fit(
    train_generator,
    validation_data=validation_generator,
    epochs=20,
    callbacks=[lr_scheduler]
)

"""# Save The Model"""

from google.colab import drive
drive.mount('/content/drive')

model.save("/content/drive/MyDrive/SaveModel/model_Resnet50V2_80:20.keras")  # ganti MyDrive dengan path sesuai lokasi penyimpanan

"""# Model metrics"""

accuracy = history.history['accuracy']
val_accuracy  = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

"""# Visualisasi training dan validation accuracy dan loss

"""

plt.figure(figsize=(15,10))

plt.subplot(2, 2, 1)
plt.plot(accuracy, label = "Training accuracy")
plt.plot(val_accuracy, label="Validation accuracy")
plt.ylim(0.8, 1)
plt.legend()
plt.title("Training vs validation accuracy")


plt.subplot(2,2,2)
plt.plot(loss, label = "Training loss")
plt.plot(val_loss, label="Validation loss")
plt.ylim(0, 0.5)
plt.legend()
plt.title("Training vs validation loss")

plt.show()

"""# Load Model"""

from google.colab import drive
drive.mount('/content/drive')

# Import load_model
from tensorflow.keras.models import load_model

# Load model dari Google Drive
model = load_model("/content/drive/MyDrive/SaveModel/model_Resnet50V2_80:20.keras")

# Evaluasi model pada test set
test_loss, test_accuracy = model.evaluate(test_generator)
print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy}")

"""# Predictions"""

pred = model.predict(test_generator)

pred

y_pred = []
for prob in pred:
    if prob >= 0.5:
        y_pred.append(1)
    else:
        y_pred.append(0)

y_pred

y_true = test_generator.classes

y_true

"""# Confusion matrix"""

cm = confusion_matrix(y_true, y_pred)

labels = ['Normal', 'Pneumonia']

# Membuat heatmap dengan label yang disesuaikan
plt.figure(figsize=(6, 5))
sn.heatmap(cm, annot=True, cmap="Blues", fmt='g', annot_kws={"size": 16},
            xticklabels=labels, yticklabels=labels)

# Menambahkan label pada sumbu x dan y
plt.xlabel('Prediksi', fontsize=14)
plt.ylabel('Label', fontsize=14)

# Menampilkan plot
plt.show()

"""# Classification report"""

print(classification_report(y_true, y_pred))